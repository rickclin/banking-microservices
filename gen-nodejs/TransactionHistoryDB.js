//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bank_types');
//HELPER FUNCTIONS AND STRUCTURES

var TransactionHistoryDB_getTransactionLog_args = function(args) {
  this.cardNumber = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
  }
};
TransactionHistoryDB_getTransactionLog_args.prototype = {};
TransactionHistoryDB_getTransactionLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionHistoryDB_getTransactionLog_args.prototype.write = function(output) {
  output.writeStructBegin('TransactionHistoryDB_getTransactionLog_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionHistoryDB_getTransactionLog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
TransactionHistoryDB_getTransactionLog_result.prototype = {};
TransactionHistoryDB_getTransactionLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionHistoryDB_getTransactionLog_result.prototype.write = function(output) {
  output.writeStructBegin('TransactionHistoryDB_getTransactionLog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionHistoryDB_insertTransaction_args = function(args) {
  this.cardNumber = null;
  this.amount = null;
  this.entryMode = null;
  this.description = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.entryMode !== undefined && args.entryMode !== null) {
      this.entryMode = args.entryMode;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
TransactionHistoryDB_insertTransaction_args.prototype = {};
TransactionHistoryDB_insertTransaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.entryMode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionHistoryDB_insertTransaction_args.prototype.write = function(output) {
  output.writeStructBegin('TransactionHistoryDB_insertTransaction_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.entryMode !== null && this.entryMode !== undefined) {
    output.writeFieldBegin('entryMode', Thrift.Type.STRING, 3);
    output.writeString(this.entryMode);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionHistoryDB_insertTransaction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TransactionHistoryDB_insertTransaction_result.prototype = {};
TransactionHistoryDB_insertTransaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionHistoryDB_insertTransaction_result.prototype.write = function(output) {
  output.writeStructBegin('TransactionHistoryDB_insertTransaction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionHistoryDBClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TransactionHistoryDBClient.prototype = {};
TransactionHistoryDBClient.prototype.seqid = function() { return this._seqid; };
TransactionHistoryDBClient.prototype.new_seqid = function() { return this._seqid += 1; };
TransactionHistoryDBClient.prototype.getTransactionLog = function(cardNumber, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTransactionLog(cardNumber);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTransactionLog(cardNumber);
  }
};

TransactionHistoryDBClient.prototype.send_getTransactionLog = function(cardNumber) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTransactionLog', Thrift.MessageType.CALL, this.seqid());
  var args = new TransactionHistoryDB_getTransactionLog_args();
  args.cardNumber = cardNumber;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TransactionHistoryDBClient.prototype.recv_getTransactionLog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TransactionHistoryDB_getTransactionLog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTransactionLog failed: unknown result');
};
TransactionHistoryDBClient.prototype.insertTransaction = function(cardNumber, amount, entryMode, description, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insertTransaction(cardNumber, amount, entryMode, description);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insertTransaction(cardNumber, amount, entryMode, description);
  }
};

TransactionHistoryDBClient.prototype.send_insertTransaction = function(cardNumber, amount, entryMode, description) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insertTransaction', Thrift.MessageType.CALL, this.seqid());
  var args = new TransactionHistoryDB_insertTransaction_args();
  args.cardNumber = cardNumber;
  args.amount = amount;
  args.entryMode = entryMode;
  args.description = description;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TransactionHistoryDBClient.prototype.recv_insertTransaction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TransactionHistoryDB_insertTransaction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('insertTransaction failed: unknown result');
};
var TransactionHistoryDBProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
TransactionHistoryDBProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
TransactionHistoryDBProcessor.prototype.process_getTransactionLog = function(seqid, input, output) {
  var args = new TransactionHistoryDB_getTransactionLog_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTransactionLog.length === 1) {
    Q.fcall(this._handler.getTransactionLog, args.cardNumber)
      .then(function(result) {
        var result_obj = new TransactionHistoryDB_getTransactionLog_result({success: result});
        output.writeMessageBegin("getTransactionLog", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTransactionLog", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTransactionLog(args.cardNumber, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TransactionHistoryDB_getTransactionLog_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTransactionLog", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTransactionLog", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TransactionHistoryDBProcessor.prototype.process_insertTransaction = function(seqid, input, output) {
  var args = new TransactionHistoryDB_insertTransaction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insertTransaction.length === 4) {
    Q.fcall(this._handler.insertTransaction, args.cardNumber, args.amount, args.entryMode, args.description)
      .then(function(result) {
        var result_obj = new TransactionHistoryDB_insertTransaction_result({success: result});
        output.writeMessageBegin("insertTransaction", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertTransaction", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.insertTransaction(args.cardNumber, args.amount, args.entryMode, args.description, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TransactionHistoryDB_insertTransaction_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insertTransaction", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertTransaction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
