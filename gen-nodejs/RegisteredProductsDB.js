//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bank_types');
//HELPER FUNCTIONS AND STRUCTURES

var RegisteredProductsDB_getAccountNumbers_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
RegisteredProductsDB_getAccountNumbers_args.prototype = {};
RegisteredProductsDB_getAccountNumbers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_getAccountNumbers_args.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_getAccountNumbers_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDB_getAccountNumbers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
RegisteredProductsDB_getAccountNumbers_result.prototype = {};
RegisteredProductsDB_getAccountNumbers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.success = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readString();
          this.success.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_getAccountNumbers_result.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_getAccountNumbers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter167 in this.success)
    {
      if (this.success.hasOwnProperty(iter167))
      {
        iter167 = this.success[iter167];
        output.writeString(iter167);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDB_getCardNumbers_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
RegisteredProductsDB_getCardNumbers_args.prototype = {};
RegisteredProductsDB_getCardNumbers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_getCardNumbers_args.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_getCardNumbers_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDB_getCardNumbers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
RegisteredProductsDB_getCardNumbers_result.prototype = {};
RegisteredProductsDB_getCardNumbers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.success = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = input.readString();
          this.success.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_getCardNumbers_result.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_getCardNumbers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter175 in this.success)
    {
      if (this.success.hasOwnProperty(iter175))
      {
        iter175 = this.success[iter175];
        output.writeString(iter175);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDB_addCard_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
RegisteredProductsDB_addCard_args.prototype = {};
RegisteredProductsDB_addCard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_addCard_args.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_addCard_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDB_addCard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RegisteredProductsDB_addCard_result.prototype = {};
RegisteredProductsDB_addCard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_addCard_result.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_addCard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDB_addAccount_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
RegisteredProductsDB_addAccount_args.prototype = {};
RegisteredProductsDB_addAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_addAccount_args.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_addAccount_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDB_addAccount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RegisteredProductsDB_addAccount_result.prototype = {};
RegisteredProductsDB_addAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredProductsDB_addAccount_result.prototype.write = function(output) {
  output.writeStructBegin('RegisteredProductsDB_addAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredProductsDBClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
RegisteredProductsDBClient.prototype = {};
RegisteredProductsDBClient.prototype.seqid = function() { return this._seqid; };
RegisteredProductsDBClient.prototype.new_seqid = function() { return this._seqid += 1; };
RegisteredProductsDBClient.prototype.getAccountNumbers = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAccountNumbers(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAccountNumbers(customerId);
  }
};

RegisteredProductsDBClient.prototype.send_getAccountNumbers = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAccountNumbers', Thrift.MessageType.CALL, this.seqid());
  var args = new RegisteredProductsDB_getAccountNumbers_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RegisteredProductsDBClient.prototype.recv_getAccountNumbers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RegisteredProductsDB_getAccountNumbers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAccountNumbers failed: unknown result');
};
RegisteredProductsDBClient.prototype.getCardNumbers = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCardNumbers(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCardNumbers(customerId);
  }
};

RegisteredProductsDBClient.prototype.send_getCardNumbers = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCardNumbers', Thrift.MessageType.CALL, this.seqid());
  var args = new RegisteredProductsDB_getCardNumbers_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RegisteredProductsDBClient.prototype.recv_getCardNumbers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RegisteredProductsDB_getCardNumbers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCardNumbers failed: unknown result');
};
RegisteredProductsDBClient.prototype.addCard = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addCard(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addCard(customerId);
  }
};

RegisteredProductsDBClient.prototype.send_addCard = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addCard', Thrift.MessageType.CALL, this.seqid());
  var args = new RegisteredProductsDB_addCard_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RegisteredProductsDBClient.prototype.recv_addCard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RegisteredProductsDB_addCard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addCard failed: unknown result');
};
RegisteredProductsDBClient.prototype.addAccount = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addAccount(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addAccount(customerId);
  }
};

RegisteredProductsDBClient.prototype.send_addAccount = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addAccount', Thrift.MessageType.CALL, this.seqid());
  var args = new RegisteredProductsDB_addAccount_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RegisteredProductsDBClient.prototype.recv_addAccount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RegisteredProductsDB_addAccount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addAccount failed: unknown result');
};
var RegisteredProductsDBProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
RegisteredProductsDBProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
RegisteredProductsDBProcessor.prototype.process_getAccountNumbers = function(seqid, input, output) {
  var args = new RegisteredProductsDB_getAccountNumbers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAccountNumbers.length === 1) {
    Q.fcall(this._handler.getAccountNumbers, args.customerId)
      .then(function(result) {
        var result_obj = new RegisteredProductsDB_getAccountNumbers_result({success: result});
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAccountNumbers(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RegisteredProductsDB_getAccountNumbers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RegisteredProductsDBProcessor.prototype.process_getCardNumbers = function(seqid, input, output) {
  var args = new RegisteredProductsDB_getCardNumbers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCardNumbers.length === 1) {
    Q.fcall(this._handler.getCardNumbers, args.customerId)
      .then(function(result) {
        var result_obj = new RegisteredProductsDB_getCardNumbers_result({success: result});
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCardNumbers(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RegisteredProductsDB_getCardNumbers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RegisteredProductsDBProcessor.prototype.process_addCard = function(seqid, input, output) {
  var args = new RegisteredProductsDB_addCard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addCard.length === 1) {
    Q.fcall(this._handler.addCard, args.customerId)
      .then(function(result) {
        var result_obj = new RegisteredProductsDB_addCard_result({success: result});
        output.writeMessageBegin("addCard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addCard", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addCard(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RegisteredProductsDB_addCard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addCard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addCard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RegisteredProductsDBProcessor.prototype.process_addAccount = function(seqid, input, output) {
  var args = new RegisteredProductsDB_addAccount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addAccount.length === 1) {
    Q.fcall(this._handler.addAccount, args.customerId)
      .then(function(result) {
        var result_obj = new RegisteredProductsDB_addAccount_result({success: result});
        output.writeMessageBegin("addAccount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addAccount", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addAccount(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RegisteredProductsDB_addAccount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addAccount", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addAccount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
