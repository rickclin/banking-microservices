//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bank_types');
//HELPER FUNCTIONS AND STRUCTURES

var CustomerInformation_retrieveContactInformation_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
CustomerInformation_retrieveContactInformation_args.prototype = {};
CustomerInformation_retrieveContactInformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_retrieveContactInformation_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_retrieveContactInformation_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_retrieveContactInformation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
CustomerInformation_retrieveContactInformation_result.prototype = {};
CustomerInformation_retrieveContactInformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.success = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var key54 = null;
          var val55 = null;
          key54 = input.readString();
          val55 = input.readString();
          this.success[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_retrieveContactInformation_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_retrieveContactInformation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter56 in this.success)
    {
      if (this.success.hasOwnProperty(kiter56))
      {
        var viter57 = this.success[kiter56];
        output.writeString(kiter56);
        output.writeString(viter57);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_updateContactInformation_args = function(args) {
  this.customerId = null;
  this.revisedInfo = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.revisedInfo !== undefined && args.revisedInfo !== null) {
      this.revisedInfo = Thrift.copyMap(args.revisedInfo, [null]);
    }
  }
};
CustomerInformation_updateContactInformation_args.prototype = {};
CustomerInformation_updateContactInformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size58 = 0;
        var _rtmp362;
        this.revisedInfo = {};
        var _ktype59 = 0;
        var _vtype60 = 0;
        _rtmp362 = input.readMapBegin();
        _ktype59 = _rtmp362.ktype;
        _vtype60 = _rtmp362.vtype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var key64 = null;
          var val65 = null;
          key64 = input.readString();
          val65 = input.readString();
          this.revisedInfo[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_updateContactInformation_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_updateContactInformation_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  if (this.revisedInfo !== null && this.revisedInfo !== undefined) {
    output.writeFieldBegin('revisedInfo', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.revisedInfo));
    for (var kiter66 in this.revisedInfo)
    {
      if (this.revisedInfo.hasOwnProperty(kiter66))
      {
        var viter67 = this.revisedInfo[kiter66];
        output.writeString(kiter66);
        output.writeString(viter67);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_updateContactInformation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CustomerInformation_updateContactInformation_result.prototype = {};
CustomerInformation_updateContactInformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_updateContactInformation_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_updateContactInformation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_verifyContactInformation_args = function(args) {
  this.customerId = null;
  this.field = null;
  this.answer = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.answer !== undefined && args.answer !== null) {
      this.answer = args.answer;
    }
  }
};
CustomerInformation_verifyContactInformation_args.prototype = {};
CustomerInformation_verifyContactInformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.answer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_verifyContactInformation_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_verifyContactInformation_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 2);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.answer !== null && this.answer !== undefined) {
    output.writeFieldBegin('answer', Thrift.Type.STRING, 3);
    output.writeString(this.answer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_verifyContactInformation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CustomerInformation_verifyContactInformation_result.prototype = {};
CustomerInformation_verifyContactInformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_verifyContactInformation_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_verifyContactInformation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_getRegisteredProducts_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
CustomerInformation_getRegisteredProducts_args.prototype = {};
CustomerInformation_getRegisteredProducts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_getRegisteredProducts_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_getRegisteredProducts_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_getRegisteredProducts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
  }
};
CustomerInformation_getRegisteredProducts_result.prototype = {};
CustomerInformation_getRegisteredProducts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size68 = 0;
        var _rtmp372;
        this.success = {};
        var _ktype69 = 0;
        var _vtype70 = 0;
        _rtmp372 = input.readMapBegin();
        _ktype69 = _rtmp372.ktype;
        _vtype70 = _rtmp372.vtype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var key74 = null;
          var val75 = null;
          key74 = input.readString();
          var _size76 = 0;
          var _rtmp380;
          val75 = [];
          var _etype79 = 0;
          _rtmp380 = input.readListBegin();
          _etype79 = _rtmp380.etype;
          _size76 = _rtmp380.size;
          for (var _i81 = 0; _i81 < _size76; ++_i81)
          {
            var elem82 = null;
            elem82 = input.readString();
            val75.push(elem82);
          }
          input.readListEnd();
          this.success[key74] = val75;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_getRegisteredProducts_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_getRegisteredProducts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter83 in this.success)
    {
      if (this.success.hasOwnProperty(kiter83))
      {
        var viter84 = this.success[kiter83];
        output.writeString(kiter83);
        output.writeListBegin(Thrift.Type.STRING, viter84.length);
        for (var iter85 in viter84)
        {
          if (viter84.hasOwnProperty(iter85))
          {
            iter85 = viter84[iter85];
            output.writeString(iter85);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_getAccountNumbers_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
CustomerInformation_getAccountNumbers_args.prototype = {};
CustomerInformation_getAccountNumbers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_getAccountNumbers_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_getAccountNumbers_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_getAccountNumbers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
CustomerInformation_getAccountNumbers_result.prototype = {};
CustomerInformation_getAccountNumbers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.success = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = input.readString();
          this.success.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_getAccountNumbers_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_getAccountNumbers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter93 in this.success)
    {
      if (this.success.hasOwnProperty(iter93))
      {
        iter93 = this.success[iter93];
        output.writeString(iter93);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_getCardNumbers_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
CustomerInformation_getCardNumbers_args.prototype = {};
CustomerInformation_getCardNumbers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_getCardNumbers_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_getCardNumbers_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_getCardNumbers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
CustomerInformation_getCardNumbers_result.prototype = {};
CustomerInformation_getCardNumbers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.success = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = input.readString();
          this.success.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_getCardNumbers_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_getCardNumbers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter101 in this.success)
    {
      if (this.success.hasOwnProperty(iter101))
      {
        iter101 = this.success[iter101];
        output.writeString(iter101);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_newAccount_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
CustomerInformation_newAccount_args.prototype = {};
CustomerInformation_newAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_newAccount_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_newAccount_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_newAccount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CustomerInformation_newAccount_result.prototype = {};
CustomerInformation_newAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_newAccount_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_newAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_newCard_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
CustomerInformation_newCard_args.prototype = {};
CustomerInformation_newCard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_newCard_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_newCard_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformation_newCard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CustomerInformation_newCard_result.prototype = {};
CustomerInformation_newCard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerInformation_newCard_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerInformation_newCard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerInformationClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CustomerInformationClient.prototype = {};
CustomerInformationClient.prototype.seqid = function() { return this._seqid; };
CustomerInformationClient.prototype.new_seqid = function() { return this._seqid += 1; };
CustomerInformationClient.prototype.retrieveContactInformation = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_retrieveContactInformation(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_retrieveContactInformation(customerId);
  }
};

CustomerInformationClient.prototype.send_retrieveContactInformation = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('retrieveContactInformation', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_retrieveContactInformation_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_retrieveContactInformation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_retrieveContactInformation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('retrieveContactInformation failed: unknown result');
};
CustomerInformationClient.prototype.updateContactInformation = function(customerId, revisedInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateContactInformation(customerId, revisedInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateContactInformation(customerId, revisedInfo);
  }
};

CustomerInformationClient.prototype.send_updateContactInformation = function(customerId, revisedInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateContactInformation', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_updateContactInformation_args();
  args.customerId = customerId;
  args.revisedInfo = revisedInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_updateContactInformation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_updateContactInformation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateContactInformation failed: unknown result');
};
CustomerInformationClient.prototype.verifyContactInformation = function(customerId, field, answer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyContactInformation(customerId, field, answer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyContactInformation(customerId, field, answer);
  }
};

CustomerInformationClient.prototype.send_verifyContactInformation = function(customerId, field, answer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyContactInformation', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_verifyContactInformation_args();
  args.customerId = customerId;
  args.field = field;
  args.answer = answer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_verifyContactInformation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_verifyContactInformation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyContactInformation failed: unknown result');
};
CustomerInformationClient.prototype.getRegisteredProducts = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRegisteredProducts(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRegisteredProducts(customerId);
  }
};

CustomerInformationClient.prototype.send_getRegisteredProducts = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegisteredProducts', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_getRegisteredProducts_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_getRegisteredProducts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_getRegisteredProducts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegisteredProducts failed: unknown result');
};
CustomerInformationClient.prototype.getAccountNumbers = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAccountNumbers(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAccountNumbers(customerId);
  }
};

CustomerInformationClient.prototype.send_getAccountNumbers = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAccountNumbers', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_getAccountNumbers_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_getAccountNumbers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_getAccountNumbers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAccountNumbers failed: unknown result');
};
CustomerInformationClient.prototype.getCardNumbers = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCardNumbers(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCardNumbers(customerId);
  }
};

CustomerInformationClient.prototype.send_getCardNumbers = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCardNumbers', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_getCardNumbers_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_getCardNumbers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_getCardNumbers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCardNumbers failed: unknown result');
};
CustomerInformationClient.prototype.newAccount = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newAccount(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newAccount(customerId);
  }
};

CustomerInformationClient.prototype.send_newAccount = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newAccount', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_newAccount_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_newAccount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_newAccount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newAccount failed: unknown result');
};
CustomerInformationClient.prototype.newCard = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_newCard(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_newCard(customerId);
  }
};

CustomerInformationClient.prototype.send_newCard = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newCard', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerInformation_newCard_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerInformationClient.prototype.recv_newCard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerInformation_newCard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newCard failed: unknown result');
};
var CustomerInformationProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
CustomerInformationProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
CustomerInformationProcessor.prototype.process_retrieveContactInformation = function(seqid, input, output) {
  var args = new CustomerInformation_retrieveContactInformation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.retrieveContactInformation.length === 1) {
    Q.fcall(this._handler.retrieveContactInformation, args.customerId)
      .then(function(result) {
        var result_obj = new CustomerInformation_retrieveContactInformation_result({success: result});
        output.writeMessageBegin("retrieveContactInformation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("retrieveContactInformation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.retrieveContactInformation(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_retrieveContactInformation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("retrieveContactInformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("retrieveContactInformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CustomerInformationProcessor.prototype.process_updateContactInformation = function(seqid, input, output) {
  var args = new CustomerInformation_updateContactInformation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateContactInformation.length === 2) {
    Q.fcall(this._handler.updateContactInformation, args.customerId, args.revisedInfo)
      .then(function(result) {
        var result_obj = new CustomerInformation_updateContactInformation_result({success: result});
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateContactInformation(args.customerId, args.revisedInfo, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_updateContactInformation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CustomerInformationProcessor.prototype.process_verifyContactInformation = function(seqid, input, output) {
  var args = new CustomerInformation_verifyContactInformation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyContactInformation.length === 3) {
    Q.fcall(this._handler.verifyContactInformation, args.customerId, args.field, args.answer)
      .then(function(result) {
        var result_obj = new CustomerInformation_verifyContactInformation_result({success: result});
        output.writeMessageBegin("verifyContactInformation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyContactInformation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyContactInformation(args.customerId, args.field, args.answer, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_verifyContactInformation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyContactInformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyContactInformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CustomerInformationProcessor.prototype.process_getRegisteredProducts = function(seqid, input, output) {
  var args = new CustomerInformation_getRegisteredProducts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRegisteredProducts.length === 1) {
    Q.fcall(this._handler.getRegisteredProducts, args.customerId)
      .then(function(result) {
        var result_obj = new CustomerInformation_getRegisteredProducts_result({success: result});
        output.writeMessageBegin("getRegisteredProducts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegisteredProducts", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRegisteredProducts(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_getRegisteredProducts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRegisteredProducts", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegisteredProducts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CustomerInformationProcessor.prototype.process_getAccountNumbers = function(seqid, input, output) {
  var args = new CustomerInformation_getAccountNumbers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAccountNumbers.length === 1) {
    Q.fcall(this._handler.getAccountNumbers, args.customerId)
      .then(function(result) {
        var result_obj = new CustomerInformation_getAccountNumbers_result({success: result});
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAccountNumbers(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_getAccountNumbers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAccountNumbers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CustomerInformationProcessor.prototype.process_getCardNumbers = function(seqid, input, output) {
  var args = new CustomerInformation_getCardNumbers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCardNumbers.length === 1) {
    Q.fcall(this._handler.getCardNumbers, args.customerId)
      .then(function(result) {
        var result_obj = new CustomerInformation_getCardNumbers_result({success: result});
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCardNumbers(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_getCardNumbers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CustomerInformationProcessor.prototype.process_newAccount = function(seqid, input, output) {
  var args = new CustomerInformation_newAccount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newAccount.length === 1) {
    Q.fcall(this._handler.newAccount, args.customerId)
      .then(function(result) {
        var result_obj = new CustomerInformation_newAccount_result({success: result});
        output.writeMessageBegin("newAccount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("newAccount", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newAccount(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_newAccount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("newAccount", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("newAccount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CustomerInformationProcessor.prototype.process_newCard = function(seqid, input, output) {
  var args = new CustomerInformation_newCard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.newCard.length === 1) {
    Q.fcall(this._handler.newCard, args.customerId)
      .then(function(result) {
        var result_obj = new CustomerInformation_newCard_result({success: result});
        output.writeMessageBegin("newCard", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("newCard", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.newCard(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CustomerInformation_newCard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("newCard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("newCard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
