//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bank_types');
//HELPER FUNCTIONS AND STRUCTURES

var ContactInformationDB_retrieveCustomer_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
  }
};
ContactInformationDB_retrieveCustomer_args.prototype = {};
ContactInformationDB_retrieveCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactInformationDB_retrieveCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('ContactInformationDB_retrieveCustomer_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactInformationDB_retrieveCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
ContactInformationDB_retrieveCustomer_result.prototype = {};
ContactInformationDB_retrieveCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size122 = 0;
        var _rtmp3126;
        this.success = {};
        var _ktype123 = 0;
        var _vtype124 = 0;
        _rtmp3126 = input.readMapBegin();
        _ktype123 = _rtmp3126.ktype;
        _vtype124 = _rtmp3126.vtype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var key128 = null;
          var val129 = null;
          key128 = input.readString();
          val129 = input.readString();
          this.success[key128] = val129;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactInformationDB_retrieveCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('ContactInformationDB_retrieveCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter130 in this.success)
    {
      if (this.success.hasOwnProperty(kiter130))
      {
        var viter131 = this.success[kiter130];
        output.writeString(kiter130);
        output.writeString(viter131);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactInformationDB_updateContactInformation_args = function(args) {
  this.customerId = null;
  this.revisedInfo = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.revisedInfo !== undefined && args.revisedInfo !== null) {
      this.revisedInfo = Thrift.copyMap(args.revisedInfo, [null]);
    }
  }
};
ContactInformationDB_updateContactInformation_args.prototype = {};
ContactInformationDB_updateContactInformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size132 = 0;
        var _rtmp3136;
        this.revisedInfo = {};
        var _ktype133 = 0;
        var _vtype134 = 0;
        _rtmp3136 = input.readMapBegin();
        _ktype133 = _rtmp3136.ktype;
        _vtype134 = _rtmp3136.vtype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var key138 = null;
          var val139 = null;
          key138 = input.readString();
          val139 = input.readString();
          this.revisedInfo[key138] = val139;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactInformationDB_updateContactInformation_args.prototype.write = function(output) {
  output.writeStructBegin('ContactInformationDB_updateContactInformation_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  if (this.revisedInfo !== null && this.revisedInfo !== undefined) {
    output.writeFieldBegin('revisedInfo', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.revisedInfo));
    for (var kiter140 in this.revisedInfo)
    {
      if (this.revisedInfo.hasOwnProperty(kiter140))
      {
        var viter141 = this.revisedInfo[kiter140];
        output.writeString(kiter140);
        output.writeString(viter141);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactInformationDB_updateContactInformation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ContactInformationDB_updateContactInformation_result.prototype = {};
ContactInformationDB_updateContactInformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactInformationDB_updateContactInformation_result.prototype.write = function(output) {
  output.writeStructBegin('ContactInformationDB_updateContactInformation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactInformationDBClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ContactInformationDBClient.prototype = {};
ContactInformationDBClient.prototype.seqid = function() { return this._seqid; };
ContactInformationDBClient.prototype.new_seqid = function() { return this._seqid += 1; };
ContactInformationDBClient.prototype.retrieveCustomer = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_retrieveCustomer(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_retrieveCustomer(customerId);
  }
};

ContactInformationDBClient.prototype.send_retrieveCustomer = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('retrieveCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new ContactInformationDB_retrieveCustomer_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContactInformationDBClient.prototype.recv_retrieveCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContactInformationDB_retrieveCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('retrieveCustomer failed: unknown result');
};
ContactInformationDBClient.prototype.updateContactInformation = function(customerId, revisedInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateContactInformation(customerId, revisedInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateContactInformation(customerId, revisedInfo);
  }
};

ContactInformationDBClient.prototype.send_updateContactInformation = function(customerId, revisedInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateContactInformation', Thrift.MessageType.CALL, this.seqid());
  var args = new ContactInformationDB_updateContactInformation_args();
  args.customerId = customerId;
  args.revisedInfo = revisedInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContactInformationDBClient.prototype.recv_updateContactInformation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContactInformationDB_updateContactInformation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateContactInformation failed: unknown result');
};
var ContactInformationDBProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ContactInformationDBProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ContactInformationDBProcessor.prototype.process_retrieveCustomer = function(seqid, input, output) {
  var args = new ContactInformationDB_retrieveCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.retrieveCustomer.length === 1) {
    Q.fcall(this._handler.retrieveCustomer, args.customerId)
      .then(function(result) {
        var result_obj = new ContactInformationDB_retrieveCustomer_result({success: result});
        output.writeMessageBegin("retrieveCustomer", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("retrieveCustomer", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.retrieveCustomer(args.customerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContactInformationDB_retrieveCustomer_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("retrieveCustomer", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("retrieveCustomer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContactInformationDBProcessor.prototype.process_updateContactInformation = function(seqid, input, output) {
  var args = new ContactInformationDB_updateContactInformation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateContactInformation.length === 2) {
    Q.fcall(this._handler.updateContactInformation, args.customerId, args.revisedInfo)
      .then(function(result) {
        var result_obj = new ContactInformationDB_updateContactInformation_result({success: result});
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateContactInformation(args.customerId, args.revisedInfo, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContactInformationDB_updateContactInformation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateContactInformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
