//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bank_types');
//HELPER FUNCTIONS AND STRUCTURES

var CardManagement_authorizePayment_args = function(args) {
  this.cardNumber = null;
  this.amount = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
  }
};
CardManagement_authorizePayment_args.prototype = {};
CardManagement_authorizePayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_authorizePayment_args.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_authorizePayment_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_authorizePayment_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CardManagement_authorizePayment_result.prototype = {};
CardManagement_authorizePayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_authorizePayment_result.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_authorizePayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_getTransactionHistory_args = function(args) {
  this.cardNumber = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
  }
};
CardManagement_getTransactionHistory_args.prototype = {};
CardManagement_getTransactionHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_getTransactionHistory_args.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_getTransactionHistory_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_getTransactionHistory_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
CardManagement_getTransactionHistory_result.prototype = {};
CardManagement_getTransactionHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_getTransactionHistory_result.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_getTransactionHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_getCardNumbers_args = function(args) {
};
CardManagement_getCardNumbers_args.prototype = {};
CardManagement_getCardNumbers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_getCardNumbers_args.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_getCardNumbers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_getCardNumbers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CardManagement_getCardNumbers_result.prototype = {};
CardManagement_getCardNumbers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_getCardNumbers_result.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_getCardNumbers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_postTransaction_args = function(args) {
  this.cardNumber = null;
  this.description = null;
  this.amount = null;
  this.entryMode = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.entryMode !== undefined && args.entryMode !== null) {
      this.entryMode = args.entryMode;
    }
  }
};
CardManagement_postTransaction_args.prototype = {};
CardManagement_postTransaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.entryMode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_postTransaction_args.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_postTransaction_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.entryMode !== null && this.entryMode !== undefined) {
    output.writeFieldBegin('entryMode', Thrift.Type.STRING, 4);
    output.writeString(this.entryMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_postTransaction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CardManagement_postTransaction_result.prototype = {};
CardManagement_postTransaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_postTransaction_result.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_postTransaction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_getTransactions_args = function(args) {
  this.cardNumber = null;
  this.numOfResults = null;
  this.dateRange = null;
  this.amountRange = null;
  this.entryMode = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.numOfResults !== undefined && args.numOfResults !== null) {
      this.numOfResults = args.numOfResults;
    }
    if (args.dateRange !== undefined && args.dateRange !== null) {
      this.dateRange = args.dateRange;
    }
    if (args.amountRange !== undefined && args.amountRange !== null) {
      this.amountRange = args.amountRange;
    }
    if (args.entryMode !== undefined && args.entryMode !== null) {
      this.entryMode = args.entryMode;
    }
  }
};
CardManagement_getTransactions_args.prototype = {};
CardManagement_getTransactions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.numOfResults = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateRange = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.amountRange = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.entryMode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_getTransactions_args.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_getTransactions_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.numOfResults !== null && this.numOfResults !== undefined) {
    output.writeFieldBegin('numOfResults', Thrift.Type.I16, 2);
    output.writeI16(this.numOfResults);
    output.writeFieldEnd();
  }
  if (this.dateRange !== null && this.dateRange !== undefined) {
    output.writeFieldBegin('dateRange', Thrift.Type.STRING, 3);
    output.writeString(this.dateRange);
    output.writeFieldEnd();
  }
  if (this.amountRange !== null && this.amountRange !== undefined) {
    output.writeFieldBegin('amountRange', Thrift.Type.STRING, 4);
    output.writeString(this.amountRange);
    output.writeFieldEnd();
  }
  if (this.entryMode !== null && this.entryMode !== undefined) {
    output.writeFieldBegin('entryMode', Thrift.Type.STRING, 5);
    output.writeString(this.entryMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_getTransactions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
CardManagement_getTransactions_result.prototype = {};
CardManagement_getTransactions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_getTransactions_result.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_getTransactions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_searchTransactions_args = function(args) {
  this.cardNumber = null;
  this.description = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
CardManagement_searchTransactions_args.prototype = {};
CardManagement_searchTransactions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_searchTransactions_args.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_searchTransactions_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_searchTransactions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
CardManagement_searchTransactions_result.prototype = {};
CardManagement_searchTransactions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_searchTransactions_result.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_searchTransactions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_changeAuthorizationRule_args = function(args) {
  this.cardNumber = null;
  this.amount = null;
  if (args) {
    if (args.cardNumber !== undefined && args.cardNumber !== null) {
      this.cardNumber = args.cardNumber;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
  }
};
CardManagement_changeAuthorizationRule_args.prototype = {};
CardManagement_changeAuthorizationRule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cardNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_changeAuthorizationRule_args.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_changeAuthorizationRule_args');
  if (this.cardNumber !== null && this.cardNumber !== undefined) {
    output.writeFieldBegin('cardNumber', Thrift.Type.STRING, 1);
    output.writeString(this.cardNumber);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagement_changeAuthorizationRule_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CardManagement_changeAuthorizationRule_result.prototype = {};
CardManagement_changeAuthorizationRule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CardManagement_changeAuthorizationRule_result.prototype.write = function(output) {
  output.writeStructBegin('CardManagement_changeAuthorizationRule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CardManagementClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CardManagementClient.prototype = {};
CardManagementClient.prototype.seqid = function() { return this._seqid; };
CardManagementClient.prototype.new_seqid = function() { return this._seqid += 1; };
CardManagementClient.prototype.authorizePayment = function(cardNumber, amount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_authorizePayment(cardNumber, amount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authorizePayment(cardNumber, amount);
  }
};

CardManagementClient.prototype.send_authorizePayment = function(cardNumber, amount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authorizePayment', Thrift.MessageType.CALL, this.seqid());
  var args = new CardManagement_authorizePayment_args();
  args.cardNumber = cardNumber;
  args.amount = amount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CardManagementClient.prototype.recv_authorizePayment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CardManagement_authorizePayment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authorizePayment failed: unknown result');
};
CardManagementClient.prototype.getTransactionHistory = function(cardNumber, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTransactionHistory(cardNumber);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTransactionHistory(cardNumber);
  }
};

CardManagementClient.prototype.send_getTransactionHistory = function(cardNumber) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTransactionHistory', Thrift.MessageType.CALL, this.seqid());
  var args = new CardManagement_getTransactionHistory_args();
  args.cardNumber = cardNumber;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CardManagementClient.prototype.recv_getTransactionHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CardManagement_getTransactionHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTransactionHistory failed: unknown result');
};
CardManagementClient.prototype.getCardNumbers = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCardNumbers();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCardNumbers();
  }
};

CardManagementClient.prototype.send_getCardNumbers = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCardNumbers', Thrift.MessageType.CALL, this.seqid());
  var args = new CardManagement_getCardNumbers_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CardManagementClient.prototype.recv_getCardNumbers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CardManagement_getCardNumbers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCardNumbers failed: unknown result');
};
CardManagementClient.prototype.postTransaction = function(cardNumber, description, amount, entryMode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postTransaction(cardNumber, description, amount, entryMode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postTransaction(cardNumber, description, amount, entryMode);
  }
};

CardManagementClient.prototype.send_postTransaction = function(cardNumber, description, amount, entryMode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('postTransaction', Thrift.MessageType.CALL, this.seqid());
  var args = new CardManagement_postTransaction_args();
  args.cardNumber = cardNumber;
  args.description = description;
  args.amount = amount;
  args.entryMode = entryMode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CardManagementClient.prototype.recv_postTransaction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CardManagement_postTransaction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('postTransaction failed: unknown result');
};
CardManagementClient.prototype.getTransactions = function(cardNumber, numOfResults, dateRange, amountRange, entryMode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTransactions(cardNumber, numOfResults, dateRange, amountRange, entryMode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTransactions(cardNumber, numOfResults, dateRange, amountRange, entryMode);
  }
};

CardManagementClient.prototype.send_getTransactions = function(cardNumber, numOfResults, dateRange, amountRange, entryMode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTransactions', Thrift.MessageType.CALL, this.seqid());
  var args = new CardManagement_getTransactions_args();
  args.cardNumber = cardNumber;
  args.numOfResults = numOfResults;
  args.dateRange = dateRange;
  args.amountRange = amountRange;
  args.entryMode = entryMode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CardManagementClient.prototype.recv_getTransactions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CardManagement_getTransactions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTransactions failed: unknown result');
};
CardManagementClient.prototype.searchTransactions = function(cardNumber, description, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchTransactions(cardNumber, description);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchTransactions(cardNumber, description);
  }
};

CardManagementClient.prototype.send_searchTransactions = function(cardNumber, description) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchTransactions', Thrift.MessageType.CALL, this.seqid());
  var args = new CardManagement_searchTransactions_args();
  args.cardNumber = cardNumber;
  args.description = description;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CardManagementClient.prototype.recv_searchTransactions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CardManagement_searchTransactions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchTransactions failed: unknown result');
};
CardManagementClient.prototype.changeAuthorizationRule = function(cardNumber, amount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changeAuthorizationRule(cardNumber, amount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changeAuthorizationRule(cardNumber, amount);
  }
};

CardManagementClient.prototype.send_changeAuthorizationRule = function(cardNumber, amount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeAuthorizationRule', Thrift.MessageType.CALL, this.seqid());
  var args = new CardManagement_changeAuthorizationRule_args();
  args.cardNumber = cardNumber;
  args.amount = amount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CardManagementClient.prototype.recv_changeAuthorizationRule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CardManagement_changeAuthorizationRule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('changeAuthorizationRule failed: unknown result');
};
var CardManagementProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
CardManagementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
CardManagementProcessor.prototype.process_authorizePayment = function(seqid, input, output) {
  var args = new CardManagement_authorizePayment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.authorizePayment.length === 2) {
    Q.fcall(this._handler.authorizePayment, args.cardNumber, args.amount)
      .then(function(result) {
        var result_obj = new CardManagement_authorizePayment_result({success: result});
        output.writeMessageBegin("authorizePayment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizePayment", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.authorizePayment(args.cardNumber, args.amount, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CardManagement_authorizePayment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("authorizePayment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizePayment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CardManagementProcessor.prototype.process_getTransactionHistory = function(seqid, input, output) {
  var args = new CardManagement_getTransactionHistory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTransactionHistory.length === 1) {
    Q.fcall(this._handler.getTransactionHistory, args.cardNumber)
      .then(function(result) {
        var result_obj = new CardManagement_getTransactionHistory_result({success: result});
        output.writeMessageBegin("getTransactionHistory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTransactionHistory", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTransactionHistory(args.cardNumber, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CardManagement_getTransactionHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTransactionHistory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTransactionHistory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CardManagementProcessor.prototype.process_getCardNumbers = function(seqid, input, output) {
  var args = new CardManagement_getCardNumbers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCardNumbers.length === 0) {
    Q.fcall(this._handler.getCardNumbers)
      .then(function(result) {
        var result_obj = new CardManagement_getCardNumbers_result({success: result});
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCardNumbers(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CardManagement_getCardNumbers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCardNumbers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CardManagementProcessor.prototype.process_postTransaction = function(seqid, input, output) {
  var args = new CardManagement_postTransaction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.postTransaction.length === 4) {
    Q.fcall(this._handler.postTransaction, args.cardNumber, args.description, args.amount, args.entryMode)
      .then(function(result) {
        var result_obj = new CardManagement_postTransaction_result({success: result});
        output.writeMessageBegin("postTransaction", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("postTransaction", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.postTransaction(args.cardNumber, args.description, args.amount, args.entryMode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CardManagement_postTransaction_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("postTransaction", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("postTransaction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CardManagementProcessor.prototype.process_getTransactions = function(seqid, input, output) {
  var args = new CardManagement_getTransactions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTransactions.length === 5) {
    Q.fcall(this._handler.getTransactions, args.cardNumber, args.numOfResults, args.dateRange, args.amountRange, args.entryMode)
      .then(function(result) {
        var result_obj = new CardManagement_getTransactions_result({success: result});
        output.writeMessageBegin("getTransactions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTransactions", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTransactions(args.cardNumber, args.numOfResults, args.dateRange, args.amountRange, args.entryMode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CardManagement_getTransactions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTransactions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTransactions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CardManagementProcessor.prototype.process_searchTransactions = function(seqid, input, output) {
  var args = new CardManagement_searchTransactions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchTransactions.length === 2) {
    Q.fcall(this._handler.searchTransactions, args.cardNumber, args.description)
      .then(function(result) {
        var result_obj = new CardManagement_searchTransactions_result({success: result});
        output.writeMessageBegin("searchTransactions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchTransactions", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchTransactions(args.cardNumber, args.description, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CardManagement_searchTransactions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("searchTransactions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchTransactions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CardManagementProcessor.prototype.process_changeAuthorizationRule = function(seqid, input, output) {
  var args = new CardManagement_changeAuthorizationRule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changeAuthorizationRule.length === 2) {
    Q.fcall(this._handler.changeAuthorizationRule, args.cardNumber, args.amount)
      .then(function(result) {
        var result_obj = new CardManagement_changeAuthorizationRule_result({success: result});
        output.writeMessageBegin("changeAuthorizationRule", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("changeAuthorizationRule", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changeAuthorizationRule(args.cardNumber, args.amount, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CardManagement_changeAuthorizationRule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("changeAuthorizationRule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("changeAuthorizationRule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
