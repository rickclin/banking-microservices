--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--

local Thrift = require "Thrift"
local TType = Thrift[1]
local TMessageType = Thrift[2]
local __TObject = Thrift[3]
local TApplicationException = Thrift[5]
local __TClient = Thrift[6]
local __TProcessor = Thrift[7]

-- HELPER FUNCTIONS AND STRUCTURES

local getRegisteredProducts_args = __TObject:new{
  customerId
}

function getRegisteredProducts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRegisteredProducts_args:write(oprot)
  oprot:writeStructBegin('getRegisteredProducts_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getRegisteredProducts_result = __TObject:new{
  success
}

function getRegisteredProducts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype111, _vtype112, _size110 = iprot:readMapBegin() 
        for _i=1,_size110 do
          local _key114 = iprot:readString()
          local _val115 = {}
          local _etype119, _size116 = iprot:readListBegin()
          for _i=1,_size116 do
            local _elem120 = iprot:readString()
            table.insert(_val115, _elem120)
          end
          iprot:readListEnd()
          self.success[_key114] = _val115
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRegisteredProducts_result:write(oprot)
  oprot:writeStructBegin('getRegisteredProducts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.success))
    for kiter121,viter122 in pairs(self.success) do
      oprot:writeString(kiter121)
      oprot:writeListBegin(TType.STRING, #viter122)
      for _,iter123 in ipairs(viter122) do
        oprot:writeString(iter123)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local addCard_args = __TObject:new{
  customerId
}

function addCard_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addCard_args:write(oprot)
  oprot:writeStructBegin('addCard_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local addCard_result = __TObject:new{
  success
}

function addCard_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addCard_result:write(oprot)
  oprot:writeStructBegin('addCard_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local addAccount_args = __TObject:new{
  customerId
}

function addAccount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addAccount_args:write(oprot)
  oprot:writeStructBegin('addAccount_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local addAccount_result = __TObject:new{
  success
}

function addAccount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function addAccount_result:write(oprot)
  oprot:writeStructBegin('addAccount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

-- CLIENT AND PUBLIC FUNCTIONS

local RegisteredProductsClient = __TObject.new(__TClient, {
  __type = 'RegisteredProductsClient'
})

function RegisteredProductsClient:getRegisteredProducts(customerId)
  self:send_getRegisteredProducts(customerId)
  return self:recv_getRegisteredProducts(customerId)
end

function RegisteredProductsClient:send_getRegisteredProducts(customerId)
  self.oprot:writeMessageBegin('getRegisteredProducts', TMessageType.CALL, self._seqid)
  local args = getRegisteredProducts_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function RegisteredProductsClient:recv_getRegisteredProducts(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getRegisteredProducts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function RegisteredProductsClient:addCard(customerId)
  self:send_addCard(customerId)
  return self:recv_addCard(customerId)
end

function RegisteredProductsClient:send_addCard(customerId)
  self.oprot:writeMessageBegin('addCard', TMessageType.CALL, self._seqid)
  local args = addCard_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function RegisteredProductsClient:recv_addCard(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = addCard_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function RegisteredProductsClient:addAccount(customerId)
  self:send_addAccount(customerId)
  return self:recv_addAccount(customerId)
end

function RegisteredProductsClient:send_addAccount(customerId)
  self.oprot:writeMessageBegin('addAccount', TMessageType.CALL, self._seqid)
  local args = addAccount_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function RegisteredProductsClient:recv_addAccount(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = addAccount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
local RegisteredProductsIface = __TObject:new{
  __type = 'RegisteredProductsIface'
}


local RegisteredProductsProcessor = __TObject.new(__TProcessor
, {
 __type = 'RegisteredProductsProcessor'
})

function RegisteredProductsProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function RegisteredProductsProcessor:process_getRegisteredProducts(seqid, iprot, oprot, server_ctx)
  local args = getRegisteredProducts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getRegisteredProducts_result:new{}
  local status, res = pcall(self.handler.getRegisteredProducts, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getRegisteredProducts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function RegisteredProductsProcessor:process_addCard(seqid, iprot, oprot, server_ctx)
  local args = addCard_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = addCard_result:new{}
  local status, res = pcall(self.handler.addCard, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('addCard', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function RegisteredProductsProcessor:process_addAccount(seqid, iprot, oprot, server_ctx)
  local args = addAccount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = addAccount_result:new{}
  local status, res = pcall(self.handler.addAccount, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('addAccount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

return RegisteredProductsClient
