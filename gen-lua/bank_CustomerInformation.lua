--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--

local Thrift = require "Thrift"
local TType = Thrift[1]
local TMessageType = Thrift[2]
local __TObject = Thrift[3]
local TApplicationException = Thrift[5]
local __TClient = Thrift[6]
local __TProcessor = Thrift[7]

-- HELPER FUNCTIONS AND STRUCTURES

local retrieveContactInformation_args = __TObject:new{
  customerId
}

function retrieveContactInformation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function retrieveContactInformation_args:write(oprot)
  oprot:writeStructBegin('retrieveContactInformation_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local retrieveContactInformation_result = __TObject:new{
  success
}

function retrieveContactInformation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype37, _vtype38, _size36 = iprot:readMapBegin() 
        for _i=1,_size36 do
          local _key40 = iprot:readString()
          local _val41 = iprot:readString()
          self.success[_key40] = _val41
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function retrieveContactInformation_result:write(oprot)
  oprot:writeStructBegin('retrieveContactInformation_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.success))
    for kiter42,viter43 in pairs(self.success) do
      oprot:writeString(kiter42)
      oprot:writeString(viter43)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local updateContactInformation_args = __TObject:new{
  customerId,
  revisedInfo
}

function updateContactInformation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.revisedInfo = {}
        local _ktype45, _vtype46, _size44 = iprot:readMapBegin() 
        for _i=1,_size44 do
          local _key48 = iprot:readString()
          local _val49 = iprot:readString()
          self.revisedInfo[_key48] = _val49
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateContactInformation_args:write(oprot)
  oprot:writeStructBegin('updateContactInformation_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  if self.revisedInfo ~= nil then
    oprot:writeFieldBegin('revisedInfo', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.revisedInfo))
    for kiter50,viter51 in pairs(self.revisedInfo) do
      oprot:writeString(kiter50)
      oprot:writeString(viter51)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local updateContactInformation_result = __TObject:new{
  success
}

function updateContactInformation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function updateContactInformation_result:write(oprot)
  oprot:writeStructBegin('updateContactInformation_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local verifyContactInformation_args = __TObject:new{
  customerId,
  field,
  answer
}

function verifyContactInformation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.field = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.answer = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function verifyContactInformation_args:write(oprot)
  oprot:writeStructBegin('verifyContactInformation_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  if self.field ~= nil then
    oprot:writeFieldBegin('field', TType.STRING, 2)
    oprot:writeString(self.field)
    oprot:writeFieldEnd()
  end
  if self.answer ~= nil then
    oprot:writeFieldBegin('answer', TType.STRING, 3)
    oprot:writeString(self.answer)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local verifyContactInformation_result = __TObject:new{
  success
}

function verifyContactInformation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function verifyContactInformation_result:write(oprot)
  oprot:writeStructBegin('verifyContactInformation_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getRegisteredProducts_args = __TObject:new{
  customerId
}

function getRegisteredProducts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRegisteredProducts_args:write(oprot)
  oprot:writeStructBegin('getRegisteredProducts_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getRegisteredProducts_result = __TObject:new{
  success
}

function getRegisteredProducts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.MAP then
        self.success = {}
        local _ktype53, _vtype54, _size52 = iprot:readMapBegin() 
        for _i=1,_size52 do
          local _key56 = iprot:readString()
          local _val57 = {}
          local _etype61, _size58 = iprot:readListBegin()
          for _i=1,_size58 do
            local _elem62 = iprot:readString()
            table.insert(_val57, _elem62)
          end
          iprot:readListEnd()
          self.success[_key56] = _val57
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRegisteredProducts_result:write(oprot)
  oprot:writeStructBegin('getRegisteredProducts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.MAP, 0)
    oprot:writeMapBegin(TType.STRING, TType.LIST, ttable_size(self.success))
    for kiter63,viter64 in pairs(self.success) do
      oprot:writeString(kiter63)
      oprot:writeListBegin(TType.STRING, #viter64)
      for _,iter65 in ipairs(viter64) do
        oprot:writeString(iter65)
      end
      oprot:writeListEnd()
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getAccountNumbers_args = __TObject:new{
  customerId
}

function getAccountNumbers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAccountNumbers_args:write(oprot)
  oprot:writeStructBegin('getAccountNumbers_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getAccountNumbers_result = __TObject:new{
  success
}

function getAccountNumbers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype69, _size66 = iprot:readListBegin()
        for _i=1,_size66 do
          local _elem70 = iprot:readString()
          table.insert(self.success, _elem70)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAccountNumbers_result:write(oprot)
  oprot:writeStructBegin('getAccountNumbers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter71 in ipairs(self.success) do
      oprot:writeString(iter71)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getCardNumbers_args = __TObject:new{
  customerId
}

function getCardNumbers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCardNumbers_args:write(oprot)
  oprot:writeStructBegin('getCardNumbers_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getCardNumbers_result = __TObject:new{
  success
}

function getCardNumbers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype75, _size72 = iprot:readListBegin()
        for _i=1,_size72 do
          local _elem76 = iprot:readString()
          table.insert(self.success, _elem76)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCardNumbers_result:write(oprot)
  oprot:writeStructBegin('getCardNumbers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter77 in ipairs(self.success) do
      oprot:writeString(iter77)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local newAccount_args = __TObject:new{
  customerId
}

function newAccount_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function newAccount_args:write(oprot)
  oprot:writeStructBegin('newAccount_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local newAccount_result = __TObject:new{
  success
}

function newAccount_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function newAccount_result:write(oprot)
  oprot:writeStructBegin('newAccount_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local newCard_args = __TObject:new{
  customerId
}

function newCard_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.customerId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function newCard_args:write(oprot)
  oprot:writeStructBegin('newCard_args')
  if self.customerId ~= nil then
    oprot:writeFieldBegin('customerId', TType.STRING, 1)
    oprot:writeString(self.customerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local newCard_result = __TObject:new{
  success
}

function newCard_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function newCard_result:write(oprot)
  oprot:writeStructBegin('newCard_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

-- CLIENT AND PUBLIC FUNCTIONS

local CustomerInformationClient = __TObject.new(__TClient, {
  __type = 'CustomerInformationClient'
})

function CustomerInformationClient:retrieveContactInformation(customerId)
  self:send_retrieveContactInformation(customerId)
  return self:recv_retrieveContactInformation(customerId)
end

function CustomerInformationClient:send_retrieveContactInformation(customerId)
  self.oprot:writeMessageBegin('retrieveContactInformation', TMessageType.CALL, self._seqid)
  local args = retrieveContactInformation_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_retrieveContactInformation(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = retrieveContactInformation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CustomerInformationClient:updateContactInformation(customerId, revisedInfo)
  self:send_updateContactInformation(customerId, revisedInfo)
  return self:recv_updateContactInformation(customerId, revisedInfo)
end

function CustomerInformationClient:send_updateContactInformation(customerId, revisedInfo)
  self.oprot:writeMessageBegin('updateContactInformation', TMessageType.CALL, self._seqid)
  local args = updateContactInformation_args:new{}
  args.customerId = customerId
  args.revisedInfo = revisedInfo
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_updateContactInformation(customerId, revisedInfo)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = updateContactInformation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CustomerInformationClient:verifyContactInformation(customerId, field, answer)
  self:send_verifyContactInformation(customerId, field, answer)
  return self:recv_verifyContactInformation(customerId, field, answer)
end

function CustomerInformationClient:send_verifyContactInformation(customerId, field, answer)
  self.oprot:writeMessageBegin('verifyContactInformation', TMessageType.CALL, self._seqid)
  local args = verifyContactInformation_args:new{}
  args.customerId = customerId
  args.field = field
  args.answer = answer
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_verifyContactInformation(customerId, field, answer)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = verifyContactInformation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CustomerInformationClient:getRegisteredProducts(customerId)
  self:send_getRegisteredProducts(customerId)
  return self:recv_getRegisteredProducts(customerId)
end

function CustomerInformationClient:send_getRegisteredProducts(customerId)
  self.oprot:writeMessageBegin('getRegisteredProducts', TMessageType.CALL, self._seqid)
  local args = getRegisteredProducts_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_getRegisteredProducts(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getRegisteredProducts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CustomerInformationClient:getAccountNumbers(customerId)
  self:send_getAccountNumbers(customerId)
  return self:recv_getAccountNumbers(customerId)
end

function CustomerInformationClient:send_getAccountNumbers(customerId)
  self.oprot:writeMessageBegin('getAccountNumbers', TMessageType.CALL, self._seqid)
  local args = getAccountNumbers_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_getAccountNumbers(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getAccountNumbers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CustomerInformationClient:getCardNumbers(customerId)
  self:send_getCardNumbers(customerId)
  return self:recv_getCardNumbers(customerId)
end

function CustomerInformationClient:send_getCardNumbers(customerId)
  self.oprot:writeMessageBegin('getCardNumbers', TMessageType.CALL, self._seqid)
  local args = getCardNumbers_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_getCardNumbers(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCardNumbers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CustomerInformationClient:newAccount(customerId)
  self:send_newAccount(customerId)
  return self:recv_newAccount(customerId)
end

function CustomerInformationClient:send_newAccount(customerId)
  self.oprot:writeMessageBegin('newAccount', TMessageType.CALL, self._seqid)
  local args = newAccount_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_newAccount(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = newAccount_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CustomerInformationClient:newCard(customerId)
  self:send_newCard(customerId)
  return self:recv_newCard(customerId)
end

function CustomerInformationClient:send_newCard(customerId)
  self.oprot:writeMessageBegin('newCard', TMessageType.CALL, self._seqid)
  local args = newCard_args:new{}
  args.customerId = customerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CustomerInformationClient:recv_newCard(customerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = newCard_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
local CustomerInformationIface = __TObject:new{
  __type = 'CustomerInformationIface'
}


local CustomerInformationProcessor = __TObject.new(__TProcessor
, {
 __type = 'CustomerInformationProcessor'
})

function CustomerInformationProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function CustomerInformationProcessor:process_retrieveContactInformation(seqid, iprot, oprot, server_ctx)
  local args = retrieveContactInformation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = retrieveContactInformation_result:new{}
  local status, res = pcall(self.handler.retrieveContactInformation, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('retrieveContactInformation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CustomerInformationProcessor:process_updateContactInformation(seqid, iprot, oprot, server_ctx)
  local args = updateContactInformation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = updateContactInformation_result:new{}
  local status, res = pcall(self.handler.updateContactInformation, self.handler, args.customerId, args.revisedInfo)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('updateContactInformation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CustomerInformationProcessor:process_verifyContactInformation(seqid, iprot, oprot, server_ctx)
  local args = verifyContactInformation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = verifyContactInformation_result:new{}
  local status, res = pcall(self.handler.verifyContactInformation, self.handler, args.customerId, args.field, args.answer)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('verifyContactInformation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CustomerInformationProcessor:process_getRegisteredProducts(seqid, iprot, oprot, server_ctx)
  local args = getRegisteredProducts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getRegisteredProducts_result:new{}
  local status, res = pcall(self.handler.getRegisteredProducts, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getRegisteredProducts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CustomerInformationProcessor:process_getAccountNumbers(seqid, iprot, oprot, server_ctx)
  local args = getAccountNumbers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getAccountNumbers_result:new{}
  local status, res = pcall(self.handler.getAccountNumbers, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getAccountNumbers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CustomerInformationProcessor:process_getCardNumbers(seqid, iprot, oprot, server_ctx)
  local args = getCardNumbers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCardNumbers_result:new{}
  local status, res = pcall(self.handler.getCardNumbers, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCardNumbers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CustomerInformationProcessor:process_newAccount(seqid, iprot, oprot, server_ctx)
  local args = newAccount_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = newAccount_result:new{}
  local status, res = pcall(self.handler.newAccount, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('newAccount', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CustomerInformationProcessor:process_newCard(seqid, iprot, oprot, server_ctx)
  local args = newCard_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = newCard_result:new{}
  local status, res = pcall(self.handler.newCard, self.handler, args.customerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('newCard', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

return CustomerInformationClient
