--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--

local Thrift = require "Thrift"
local TType = Thrift[1]
local TMessageType = Thrift[2]
local __TObject = Thrift[3]
local TApplicationException = Thrift[5]
local __TClient = Thrift[6]
local __TProcessor = Thrift[7]

-- HELPER FUNCTIONS AND STRUCTURES

local authorizePayment_args = __TObject:new{
  cardNumber,
  amount
}

function authorizePayment_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.amount = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authorizePayment_args:write(oprot)
  oprot:writeStructBegin('authorizePayment_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.DOUBLE, 2)
    oprot:writeDouble(self.amount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local authorizePayment_result = __TObject:new{
  success
}

function authorizePayment_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function authorizePayment_result:write(oprot)
  oprot:writeStructBegin('authorizePayment_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getTransactionHistory_args = __TObject:new{
  cardNumber
}

function getTransactionHistory_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTransactionHistory_args:write(oprot)
  oprot:writeStructBegin('getTransactionHistory_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getTransactionHistory_result = __TObject:new{
  success
}

function getTransactionHistory_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = iprot:readString()
          table.insert(self.success, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTransactionHistory_result:write(oprot)
  oprot:writeStructBegin('getTransactionHistory_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter5 in ipairs(self.success) do
      oprot:writeString(iter5)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getCardNumbers_args = __TObject:new{

}

function getCardNumbers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCardNumbers_args:write(oprot)
  oprot:writeStructBegin('getCardNumbers_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getCardNumbers_result = __TObject:new{
  success
}

function getCardNumbers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getCardNumbers_result:write(oprot)
  oprot:writeStructBegin('getCardNumbers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local postTransaction_args = __TObject:new{
  cardNumber,
  description,
  amount,
  entryMode
}

function postTransaction_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.description = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.DOUBLE then
        self.amount = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.entryMode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function postTransaction_args:write(oprot)
  oprot:writeStructBegin('postTransaction_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRING, 2)
    oprot:writeString(self.description)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.DOUBLE, 3)
    oprot:writeDouble(self.amount)
    oprot:writeFieldEnd()
  end
  if self.entryMode ~= nil then
    oprot:writeFieldBegin('entryMode', TType.STRING, 4)
    oprot:writeString(self.entryMode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local postTransaction_result = __TObject:new{
  success
}

function postTransaction_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function postTransaction_result:write(oprot)
  oprot:writeStructBegin('postTransaction_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getTransactions_args = __TObject:new{
  cardNumber,
  numOfResults,
  dateRange,
  amountRange,
  entryMode
}

function getTransactions_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I16 then
        self.numOfResults = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.dateRange = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.amountRange = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.entryMode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTransactions_args:write(oprot)
  oprot:writeStructBegin('getTransactions_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  if self.numOfResults ~= nil then
    oprot:writeFieldBegin('numOfResults', TType.I16, 2)
    oprot:writeI16(self.numOfResults)
    oprot:writeFieldEnd()
  end
  if self.dateRange ~= nil then
    oprot:writeFieldBegin('dateRange', TType.STRING, 3)
    oprot:writeString(self.dateRange)
    oprot:writeFieldEnd()
  end
  if self.amountRange ~= nil then
    oprot:writeFieldBegin('amountRange', TType.STRING, 4)
    oprot:writeString(self.amountRange)
    oprot:writeFieldEnd()
  end
  if self.entryMode ~= nil then
    oprot:writeFieldBegin('entryMode', TType.STRING, 5)
    oprot:writeString(self.entryMode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getTransactions_result = __TObject:new{
  success
}

function getTransactions_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype9, _size6 = iprot:readListBegin()
        for _i=1,_size6 do
          local _elem10 = iprot:readString()
          table.insert(self.success, _elem10)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTransactions_result:write(oprot)
  oprot:writeStructBegin('getTransactions_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter11 in ipairs(self.success) do
      oprot:writeString(iter11)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local searchTransactions_args = __TObject:new{
  cardNumber,
  description
}

function searchTransactions_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.description = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchTransactions_args:write(oprot)
  oprot:writeStructBegin('searchTransactions_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRING, 2)
    oprot:writeString(self.description)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local searchTransactions_result = __TObject:new{
  success
}

function searchTransactions_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype15, _size12 = iprot:readListBegin()
        for _i=1,_size12 do
          local _elem16 = iprot:readString()
          table.insert(self.success, _elem16)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function searchTransactions_result:write(oprot)
  oprot:writeStructBegin('searchTransactions_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter17 in ipairs(self.success) do
      oprot:writeString(iter17)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local changeAuthorizationRule_args = __TObject:new{
  cardNumber,
  amount
}

function changeAuthorizationRule_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.amount = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function changeAuthorizationRule_args:write(oprot)
  oprot:writeStructBegin('changeAuthorizationRule_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.DOUBLE, 2)
    oprot:writeDouble(self.amount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local changeAuthorizationRule_result = __TObject:new{
  success
}

function changeAuthorizationRule_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function changeAuthorizationRule_result:write(oprot)
  oprot:writeStructBegin('changeAuthorizationRule_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

-- CLIENT AND PUBLIC FUNCTIONS

local CardManagementClient = __TObject.new(__TClient, {
  __type = 'CardManagementClient'
})

function CardManagementClient:authorizePayment(cardNumber, amount)
  self:send_authorizePayment(cardNumber, amount)
  return self:recv_authorizePayment(cardNumber, amount)
end

function CardManagementClient:send_authorizePayment(cardNumber, amount)
  self.oprot:writeMessageBegin('authorizePayment', TMessageType.CALL, self._seqid)
  local args = authorizePayment_args:new{}
  args.cardNumber = cardNumber
  args.amount = amount
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CardManagementClient:recv_authorizePayment(cardNumber, amount)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = authorizePayment_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CardManagementClient:getTransactionHistory(cardNumber)
  self:send_getTransactionHistory(cardNumber)
  return self:recv_getTransactionHistory(cardNumber)
end

function CardManagementClient:send_getTransactionHistory(cardNumber)
  self.oprot:writeMessageBegin('getTransactionHistory', TMessageType.CALL, self._seqid)
  local args = getTransactionHistory_args:new{}
  args.cardNumber = cardNumber
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CardManagementClient:recv_getTransactionHistory(cardNumber)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getTransactionHistory_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CardManagementClient:getCardNumbers()
  self:send_getCardNumbers()
  return self:recv_getCardNumbers()
end

function CardManagementClient:send_getCardNumbers()
  self.oprot:writeMessageBegin('getCardNumbers', TMessageType.CALL, self._seqid)
  local args = getCardNumbers_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CardManagementClient:recv_getCardNumbers()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getCardNumbers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CardManagementClient:postTransaction(cardNumber, description, amount, entryMode)
  self:send_postTransaction(cardNumber, description, amount, entryMode)
  return self:recv_postTransaction(cardNumber, description, amount, entryMode)
end

function CardManagementClient:send_postTransaction(cardNumber, description, amount, entryMode)
  self.oprot:writeMessageBegin('postTransaction', TMessageType.CALL, self._seqid)
  local args = postTransaction_args:new{}
  args.cardNumber = cardNumber
  args.description = description
  args.amount = amount
  args.entryMode = entryMode
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CardManagementClient:recv_postTransaction(cardNumber, description, amount, entryMode)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = postTransaction_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CardManagementClient:getTransactions(cardNumber, numOfResults, dateRange, amountRange, entryMode)
  self:send_getTransactions(cardNumber, numOfResults, dateRange, amountRange, entryMode)
  return self:recv_getTransactions(cardNumber, numOfResults, dateRange, amountRange, entryMode)
end

function CardManagementClient:send_getTransactions(cardNumber, numOfResults, dateRange, amountRange, entryMode)
  self.oprot:writeMessageBegin('getTransactions', TMessageType.CALL, self._seqid)
  local args = getTransactions_args:new{}
  args.cardNumber = cardNumber
  args.numOfResults = numOfResults
  args.dateRange = dateRange
  args.amountRange = amountRange
  args.entryMode = entryMode
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CardManagementClient:recv_getTransactions(cardNumber, numOfResults, dateRange, amountRange, entryMode)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getTransactions_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CardManagementClient:searchTransactions(cardNumber, description)
  self:send_searchTransactions(cardNumber, description)
  return self:recv_searchTransactions(cardNumber, description)
end

function CardManagementClient:send_searchTransactions(cardNumber, description)
  self.oprot:writeMessageBegin('searchTransactions', TMessageType.CALL, self._seqid)
  local args = searchTransactions_args:new{}
  args.cardNumber = cardNumber
  args.description = description
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CardManagementClient:recv_searchTransactions(cardNumber, description)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = searchTransactions_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function CardManagementClient:changeAuthorizationRule(cardNumber, amount)
  self:send_changeAuthorizationRule(cardNumber, amount)
  return self:recv_changeAuthorizationRule(cardNumber, amount)
end

function CardManagementClient:send_changeAuthorizationRule(cardNumber, amount)
  self.oprot:writeMessageBegin('changeAuthorizationRule', TMessageType.CALL, self._seqid)
  local args = changeAuthorizationRule_args:new{}
  args.cardNumber = cardNumber
  args.amount = amount
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function CardManagementClient:recv_changeAuthorizationRule(cardNumber, amount)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = changeAuthorizationRule_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

local CardManagementIface = __TObject:new{
  __type = 'CardManagementIface'
}


local CardManagementProcessor = __TObject.new(__TProcessor
, {
 __type = 'CardManagementProcessor'
})

function CardManagementProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function CardManagementProcessor:process_authorizePayment(seqid, iprot, oprot, server_ctx)
  local args = authorizePayment_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = authorizePayment_result:new{}
  local status, res = pcall(self.handler.authorizePayment, self.handler, args.cardNumber, args.amount)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('authorizePayment', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CardManagementProcessor:process_getTransactionHistory(seqid, iprot, oprot, server_ctx)
  local args = getTransactionHistory_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getTransactionHistory_result:new{}
  local status, res = pcall(self.handler.getTransactionHistory, self.handler, args.cardNumber)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getTransactionHistory', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CardManagementProcessor:process_getCardNumbers(seqid, iprot, oprot, server_ctx)
  local args = getCardNumbers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getCardNumbers_result:new{}
  local status, res = pcall(self.handler.getCardNumbers, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getCardNumbers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CardManagementProcessor:process_postTransaction(seqid, iprot, oprot, server_ctx)
  local args = postTransaction_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = postTransaction_result:new{}
  local status, res = pcall(self.handler.postTransaction, self.handler, args.cardNumber, args.description, args.amount, args.entryMode)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('postTransaction', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CardManagementProcessor:process_getTransactions(seqid, iprot, oprot, server_ctx)
  local args = getTransactions_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getTransactions_result:new{}
  local status, res = pcall(self.handler.getTransactions, self.handler, args.cardNumber, args.numOfResults, args.dateRange, args.amountRange, args.entryMode)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getTransactions', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CardManagementProcessor:process_searchTransactions(seqid, iprot, oprot, server_ctx)
  local args = searchTransactions_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = searchTransactions_result:new{}
  local status, res = pcall(self.handler.searchTransactions, self.handler, args.cardNumber, args.description)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('searchTransactions', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function CardManagementProcessor:process_changeAuthorizationRule(seqid, iprot, oprot, server_ctx)
  local args = changeAuthorizationRule_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = changeAuthorizationRule_result:new{}
  local status, res = pcall(self.handler.changeAuthorizationRule, self.handler, args.cardNumber, args.amount)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('changeAuthorizationRule', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

return CardManagementClient
