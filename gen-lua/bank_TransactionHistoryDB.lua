--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


local Thrift = require "Thrift"
local TType = Thrift[1]
local TMessageType = Thrift[2]
local __TObject = Thrift[3]
local TApplicationException = Thrift[5]
local __TClient = Thrift[6]
local __TProcessor = Thrift[7]

-- HELPER FUNCTIONS AND STRUCTURES

local getTransactionLog_args = __TObject:new{
  cardNumber
}

function getTransactionLog_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTransactionLog_args:write(oprot)
  oprot:writeStructBegin('getTransactionLog_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getTransactionLog_result = __TObject:new{
  success
}

function getTransactionLog_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype33, _size30 = iprot:readListBegin()
        for _i=1,_size30 do
          local _elem34 = iprot:readString()
          table.insert(self.success, _elem34)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getTransactionLog_result:write(oprot)
  oprot:writeStructBegin('getTransactionLog_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter35 in ipairs(self.success) do
      oprot:writeString(iter35)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local insertTransaction_args = __TObject:new{
  cardNumber,
  amount,
  entryMode,
  description
}

function insertTransaction_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.cardNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.amount = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.entryMode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.description = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function insertTransaction_args:write(oprot)
  oprot:writeStructBegin('insertTransaction_args')
  if self.cardNumber ~= nil then
    oprot:writeFieldBegin('cardNumber', TType.STRING, 1)
    oprot:writeString(self.cardNumber)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.DOUBLE, 2)
    oprot:writeDouble(self.amount)
    oprot:writeFieldEnd()
  end
  if self.entryMode ~= nil then
    oprot:writeFieldBegin('entryMode', TType.STRING, 3)
    oprot:writeString(self.entryMode)
    oprot:writeFieldEnd()
  end
  if self.description ~= nil then
    oprot:writeFieldBegin('description', TType.STRING, 4)
    oprot:writeString(self.description)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local insertTransaction_result = __TObject:new{
  success
}

function insertTransaction_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function insertTransaction_result:write(oprot)
  oprot:writeStructBegin('insertTransaction_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

-- CLIENT AND PUBLIC FUNCTIONS

local TransactionHistoryDBClient = __TObject.new(__TClient, {
  __type = 'TransactionHistoryDBClient'
})

function TransactionHistoryDBClient:getTransactionLog(cardNumber)
  self:send_getTransactionLog(cardNumber)
  return self:recv_getTransactionLog(cardNumber)
end

function TransactionHistoryDBClient:send_getTransactionLog(cardNumber)
  self.oprot:writeMessageBegin('getTransactionLog', TMessageType.CALL, self._seqid)
  local args = getTransactionLog_args:new{}
  args.cardNumber = cardNumber
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function TransactionHistoryDBClient:recv_getTransactionLog(cardNumber)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getTransactionLog_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function TransactionHistoryDBClient:insertTransaction(cardNumber, amount, entryMode, description)
  self:send_insertTransaction(cardNumber, amount, entryMode, description)
  return self:recv_insertTransaction(cardNumber, amount, entryMode, description)
end

function TransactionHistoryDBClient:send_insertTransaction(cardNumber, amount, entryMode, description)
  self.oprot:writeMessageBegin('insertTransaction', TMessageType.CALL, self._seqid)
  local args = insertTransaction_args:new{}
  args.cardNumber = cardNumber
  args.amount = amount
  args.entryMode = entryMode
  args.description = description
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function TransactionHistoryDBClient:recv_insertTransaction(cardNumber, amount, entryMode, description)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = insertTransaction_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
local TransactionHistoryDBIface = __TObject:new{
  __type = 'TransactionHistoryDBIface'
}


local TransactionHistoryDBProcessor = __TObject.new(__TProcessor
, {
 __type = 'TransactionHistoryDBProcessor'
})

function TransactionHistoryDBProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function TransactionHistoryDBProcessor:process_getTransactionLog(seqid, iprot, oprot, server_ctx)
  local args = getTransactionLog_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getTransactionLog_result:new{}
  local status, res = pcall(self.handler.getTransactionLog, self.handler, args.cardNumber)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('getTransactionLog', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function TransactionHistoryDBProcessor:process_insertTransaction(seqid, iprot, oprot, server_ctx)
  local args = insertTransaction_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = insertTransaction_result:new{}
  local status, res = pcall(self.handler.insertTransaction, self.handler, args.cardNumber, args.amount, args.entryMode, args.description)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('insertTransaction', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

return TransactionHistoryDBClient
